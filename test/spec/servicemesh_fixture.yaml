apiVersion: v1
kind: Service
metadata:
  name: servicemesh-spec
spec:
  ports:
  - port: 80
    targetPort: spec-web
  selector:
    app: servicemesh-spec
---
apiVersion: v1
kind: Service
metadata:
  name: servicemesh-spec-stable
spec:
  ports:
  - port: 80
    targetPort: spec-web
  selector:
    app: servicemesh-spec
---
apiVersion: v1
kind: Service
metadata:
  name: servicemesh-spec-canary
spec:
  ports:
  - port: 80
    targetPort: spec-web
  selector:
    app: servicemesh-spec
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: servicemesh-spec
spec:
  replicas: 1
  selector:
    matchLabels:
      app: servicemesh-spec
  template:
    metadata:
      labels:
        app: servicemesh-spec
      annotations:
        'linkerd.io/inject': 'enabled'
    spec:
      containers:
        - image: traefik/whoami:latest
          name: servicemesh-spec
          ports:
            - containerPort: 80
              name: spec-web
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: servicemesh-spec
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - kind: Rule
      middlewares:
        - name: servicemesh-spec-header
      match: Host(`servicemesh-spec.k3d.local.profitbricks.net`)
      services:
        - name: servicemesh-spec
          port: 80
    - kind: Rule
      match: Host(`servicemesh-spec-stable.k3d.local.profitbricks.net`)
      services:
        - name: servicemesh-spec-stable
          port: 80
    - kind: Rule
      match: Host(`servicemesh-spec-canary.k3d.local.profitbricks.net`)
      services:
        - name: servicemesh-spec-canary
          port: 80
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: servicemesh-spec-header
spec:
  headers:
    customRequestHeaders:
      l5d-dst-override: "servicemesh-spec.default.svc.cluster.local:80"
